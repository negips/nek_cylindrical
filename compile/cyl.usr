c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)

      implicit none  
  
      include 'SIZE'
      include 'PARALLEL'
!      include 'TOTAL'
      include 'INPUT'
      include 'TSTEP'
      include 'NEKUSE'

      integer e,ix,iy,iz,ieg

      real rhog         ! density of air
      real rhow         ! density of water
      real mug          ! dynamic viscosity of air
      real muw          ! dynamic viscosity of water
      real nug          ! kinematic viscosity of air
      real nuw          ! kinematic viscosity of water
      real alpha

      real setvp

      real distn, eps

!     densities      
      rhog   = uparam(1)         ! 1.2061e-3
      rhow   = uparam(2)         ! 1.0

!     viscosities      
      mug    = uparam(3)         ! 1.5052e-6
      muw    = uparam(4)         ! 8.3e-5

      nug    = mug/rhog
      nuw    = muw/rhow

      eps    = 3.0e-2

      if (ifield.eq.1) then
        utrans = setvp(rhog,rhow,temp,eps)
        udiff  = setvp(mug,muw,temp,eps)
      endif  

      if (ifield .eq. 2) then
        e = gllel(ieg)
        utrans = 1.0   
        udiff = 1.0 ! param(8)
      endif
 
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)

      implicit none        
  
      include 'SIZE'
      include 'NEKUSE'

      integer ix,iy,iz,ieg

      ffx = 0.00
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol =  0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk

      implicit none

      include 'SIZE'
      include 'GEOM'
      include 'SOLN'
      include 'MVGEOM'
      include 'INPUT'
      include 'TSTEP'
      include 'MASS'
      include 'PARALLEL'      ! nelgv

      include 'F3D'
      include 'FS_ALE'
      include 'TEST'
      include 'DOMAIN'
      include 'WZ'

      integer lt
      parameter (lt=lx1*ly1*lz1*lelt)

      integer i,j,k,e,n,n2

      real x,y,z

      real gl2norm,glsc2,glsc3
      integer resetf

      n  = lx1*ly1*lz1*nelv
      n2 = lx2*ly2*lz2*nelv

      if (istep.eq.0) then

        if (param(95).gt.0) then
          param(95) = 50        ! start of projections
        endif

!       Initialize cylindrical solve        
        call cyl_init()

        call rone(vtrans(1,1,1,1,2),n)
        call rone(vdiff(1,1,1,1,2),n)

        call phi0(t)

        ifield = 1
        call vprops
        ifield = 2
        call vprops

        ifheat = .false.

        call frame_start

        ifto = .true.

        call outpost(v1mask,v2mask,v3mask,pr,tmask,'msk')

        call outpost(vx,vy,vz,pr,t,'   ')

!       Reynolds number of the field
        do i=1,n
          t(i,1,1,1,2) = vtrans(i,1,1,1,1)*1.0*7.3/vdiff(i,1,1,1,1)
        enddo       
        call outpost2(vtrans,vdiff,t(1,1,1,1,2),pr,
     $                vdiff(1,1,1,1,2),1,'vis')

!!       Preconditioner
!        param(42)=uparam(8)       ! 0: GMRES (nonsymmetric), 1: PCG w/o weights
!        param(43)=uparam(9)       ! 0: Additive multilevel (param 42=0), 1: Original 2 level
!        param(44)=uparam(10)      ! 0: E based Schwartz (FEM), 1: A based Schwartz

12    format(A4,2x,16(E12.5,2x))

!        call gen_mapping_mvb()

      endif 

      call frame_monitor

      call chkpt_main

      ifto = .true.
        
!      if (fs_iffs) call fs_mvmesh_linear()

!     Reset preconditioner
      resetf = int(uparam(7))
      if (mod(istep,resetf).eq.0) then
        call reset_preconditioner()
!!       Reynolds number of the field
!        do i=1,n
!          t(i,1,1,1,2) = vtrans(i,1,1,1,1)*1.0*7.3/vdiff(i,1,1,1,1)
!        enddo       
!        call outpost2(vtrans,vdiff,t(1,1,1,1,2),pr,
!     $                vdiff(1,1,1,1,2),1,'vis')
      endif

      if (istep.eq.nsteps.or.lastep.eq.1) then
        call frame_end
      endif


      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)

      implicit none

      include 'SIZE'
      include 'NEKUSE'
      include 'GEOM'

      integer ix,iy,iz,iside,ieg
      real pi

      integer jp
      common /ppointr/ jp

      real rmid,xmid

      real wallx(2)
      real rady(2)
      real omega(2)
      real tc_a(2)
      common /taylor_geom/ wallx,rady,omega,tc_a

      real mu,x0

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0

      rmid = (rady(1)+rady(2))/2.0
      if (y.lt.(rmid)) then
        uz = omega(1)*rady(1)
      else
        uz = omega(2)*rady(2)
      endif

!!     Damping near the top/bottom walls
!      mu = 0.05
!      xmid = (wallx(1)+wallx(2))/2.0
!      if (x.lt.xmid) then
!        x0 = wallx(1)
!        ux = (1.0 - exp(-((x-x0)/mu)**2))*ux
!        uy = (1.0 - exp(-((x-x0)/mu)**2))*uy
!        uz = (1.0 - exp(-((x-x0)/mu)**2))*uz
!      else
!        x0 = wallx(2)
!        ux = (1.0 - exp(-((x-x0)/mu)**2))*ux
!        uy = (1.0 - exp(-((x-x0)/mu)**2))*uy
!        uz = (1.0 - exp(-((x-x0)/mu)**2))*uz
!      endif


      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)

      implicit none

      include 'SIZE'
      include 'INPUT'         ! if3d
      include 'PARALLEL'
      include 'NEKUSE'
      include 'GEOM'

      include 'F3D'

      integer ix,iy,iz,ieg
      real pi

      real wallx(2)
      real rady(2)
      real omega(2)
      real tc_a(2)
      common /taylor_geom/ wallx,rady,omega,tc_a

      real rmid,xmid,y0,z0
      real mu,x0

      real rnd

      call random_number(rnd)

      pi = 4.0*atan(1.0)

      ux = 0.0
      uy = 0.
      uz = tc_a(1)*y + tc_a(2)/y + 0.001*rnd


!!     Damping near the top/bottom walls
!      mu = 0.01
!      xmid = (wallx(1)+wallx(2))/2.0
!      if (x.lt.xmid) then
!        x0 = wallx(1)
!        ux = (1.0 - exp(-((x-x0)/mu)**2))*ux
!        uy = (1.0 - exp(-((x-x0)/mu)**2))*uy
!        uz = (1.0 - exp(-((x-x0)/mu)**2))*uz
!      else
!        x0 = wallx(2)
!        ux = (1.0 - exp(-((x-x0)/mu)**2))*ux
!        uy = (1.0 - exp(-((x-x0)/mu)**2))*uy
!        uz = (1.0 - exp(-((x-x0)/mu)**2))*uz
!      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat   ! This routine to modify element vertices

      implicit none  
  
      include 'SIZE'      ! _before_ mesh is generated, which 
      include 'INPUT'
      include 'TSTEP'
      include 'PARALLEL'

      integer e,i,nc

      param(42)=0       ! 0: GMRES (nonsymmetric), 1: PCG w/o weights
      param(43)=1       ! 0: Additive multilevel (param 42=0), 1: Original 2 level
      param(44)=0       ! 0: E based Schwartz (FEM), 1: A based Schwartz

      nc = 2**ndim

      pi = 4.0*atan(1.0)

      do e=1,nelv
      do i=1,nc
!        xc(i,e) = 2.0*pi*xc(i,e)
      enddo
      enddo


      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2   ! This routine to modify mesh coordinates

      implicit none

      include 'SIZE'
      include 'INPUT'      ! cbc
      include 'PARALLEL'
      include 'GEOM'

      integer iel,ifc
      integer n

      if (if3d.and..not.ifcyclic) then
        n = lx1*ly1*lz1*nelv
!        call cmult(zm1,0.20,n)
      endif  

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3

      implicit none        

      include 'SIZE'
      include 'SOLN'    ! tmult
      include 'INPUT'
      include 'GEOM'

      integer i,n
      real rad
      common /scrcg/ rad(lx1,ly1,lz1,lelt)
     
      real wallx(2)
      real rady(2)
      real omega(2)
      real tc_a(2)
      common /taylor_geom/ wallx,rady,omega,tc_a

      real glmin,glmax

      n = lx1*ly1*lz1*nelv
      wallx(1) = glmin(xm1,n)
      wallx(2) = glmax(xm1,n)

      do i=1,n
!        rad(i,1,1,1) = sqrt(ym1(i,1,1,1)**2 + zm1(i,1,1,1)**2)
        rad(i,1,1,1) = ym1(i,1,1,1)
      enddo

      rady(1) = glmin(rad,n)
      rady(2) = glmax(rad,n)

      omega(1) = 1.0/rady(1)
      omega(2) = 0.0
      tc_a(1) = (omega(2)*(rady(2)**2) - omega(1)*rady(1)*rady(1))
     $            /(rady(2)**2 - rady(1)**2)
      tc_a(2) = (omega(1) - omega(2))*(rady(1)**2)*(rady(2)**2)
     $            /(rady(2)**2 - rady(1)**2)

      if (nio.eq.0) write(6,10) 
     $      'Cylindrical Params: R1,R2,a1,a2,wall1,wall2',
     $      rady(1),rady(2),tc_a(1),tc_a(2),wallx(1),wallx(2)

10    format(A43,2x,6(F8.5,2x))

      return
      end
c-----------------------------------------------------------------------
      subroutine phi0(phi)

      implicit none

      include 'SIZE'
      include 'GEOM'

      integer lv
      parameter (lv=lx1*ly1*lz1*lelv)

      real phi(lv)
     
      integer i,n
      real x,y
      real r,r0
      real x0

      real pi

      n=lx1*ly1*lz1*nelv
      
      pi = 4.0*atan(1.0)
      x0 = 1.50
      do i=1,n
        x = xm1(i,1,1,1)
        y = ym1(i,1,1,1)
        r = sqrt(x**2 + y**2)
        phi(i) = x - x0        ! signed distance from interface
!        phi(i) = x - (r0+ 0.025*sin(2.0*pi*(y-1.0)/0.8))        ! wavy interface 
      enddo  

      return
      end subroutine phi0
!---------------------------------------------------------------------- 

      real function heavyside(phi,eps)

      real phi,eps
      real pi

      pi = 4.0*atan(1.0) 

      if (phi.lt.-eps) then
        heavyside = 0.0
      elseif (phi.gt.eps) then
        heavyside = 1.0
      else
        heavyside = 0.5*(1.0 + phi/eps + 1.0/pi*sin(pi*phi/eps))
!        heavyside = 1.0*(1.0 + phi/eps + 0.0/pi*sin(pi*phi/eps))
      endif  

      return
      end function heavyside
!---------------------------------------------------------------------- 

      real function setvp(vg,vl,phi,eps)

      real vg     ! gas property
      real vl     ! liquid property
      real phi    ! disgned distance function
      real eps    
      real heavyside    ! heavyside function

      heavy = heavyside(phi,eps)
      setvp = vg + (vl - vg)*heavy      

      return
      end function 
!---------------------------------------------------------------------- 

      subroutine heavydist(phi,eps,off)

      implicit none

      include 'SIZE'
      include 'GEOM'
      include 'SOLN'

      integer lv
      parameter (lv=lx1*ly1*lz1*lelv)

      real phi(lv)
      real phioff
      real heavyside          ! function
      
      integer i,j,k,e,n
      real hd
      real eps
      real off

      n=lx1*ly1*lz1*nelv

      do i=1,n
        phioff = phi(i)+off
        hd = heavyside(phioff,eps)
        phi(i) = hd
      enddo  

      return
      end subroutine heavydist
!---------------------------------------------------------------------- 

      subroutine theta_outpost()

      implicit none

      include 'SIZE'
      include 'GEOM'
      include 'SOLN'

      integer i,j,k,e
      integer n

      real x,y,z,theta,phi
      real pi

      n = lx1*ly1*lz1*nelv
      pi = 4.0*atan(1.0)

      do i=1,n
        x = xm1(i,1,1,1)
        y = ym1(i,1,1,1)
        z = zm1(i,1,1,1)

        phi   = atan2(y,z)*180/pi
        theta = atan2(z,y)*180/pi

        vx(i,1,1,1) = theta
        vy(i,1,1,1) = phi

      enddo

      call outpost(vx,vy,vz,pr,t,'phi')

      return
      end subroutine        
!---------------------------------------------------------------------- 

      subroutine fast_check()

      implicit none

      include 'SIZE'


      return
      end subroutine fast_check
!---------------------------------------------------------------------- 

      subroutine outmat_formatted(a,m,n,name6,ie)

      real a(m,n)
      character*6 name6

      character*28 str

      call blank(str,28)

      write(str,7) '(I5,2x,A6,2x,',n,'(E15.8E2,2x))'
    7 format(a13,I2,A13)

      write(6,*) 
      write(6,*) ie,' matrix: ',name6,m,n,str

      do i=1,m
         write(6,str) ie,name6,(a(i,j),j=1,n)
      enddo
      write(6,*) 

      return
      end
c-----------------------------------------------------------------------














